addCircles(radius = ~count*50, weight = 1, color = ~factpal(Genus), opacity = 100,
popup = ~paste('Genus:', Genus, '<br>', 'Location:',LGA_NAME22, '<br>', 'Number of observation:', count)) %>%
addLegend(position = 'bottomright', pal = factpal, values = ~Genus, title = "Genus")
})
}
#####################################################
shinyApp(ui = ui, server = server)
#####################################################
shinyApp(ui = ui, server = server)
?fitBounds()
?fitBounds()
?clearControls()
#####################################################
server <- function(input, output){
# create plot_1
plot_1 <- ggplot(data = data_plt1, aes(x = reorder(Genus, observation_number), y = observation_number, fill = Habitat)) +
geom_col(color = "black") +
labs(x = 'Genera', y = 'Number of observation', title = "VIS1 Frogs habitat") +
scale_fill_brewer(palette = "Dark2") + theme(plot.title = element_text(size = 20,face = 'bold')) + theme_light()
output$plot_1 <- renderPlot(plot_1)
# create plot_1
plot_2 <- ggplot(data_plt2, aes(x = Time_Start, fill = Genus)) +
geom_bar(color = 'black') + labs(x = 'Hour of day', y = "Number of observation", title = 'VIS2 Number of observation in hours') +
scale_fill_brewer(palette = "Dark2") + theme(plot.title = element_text(size = 20,face = 'bold'))  + theme_light()
output$plot_2 <- renderPlot(plot_2)
# Create interactive map
# receive input for filter data
filtered_data <- reactive({
group_data %>%
filter(count >= input$range[1] & count <= input$range[2]) %>%  # filter data by range
filter(Genus %in% input$genus)  # filter data by checkbox choices
})
# static map
output$map <- renderLeaflet({
leaflet(group_data) %>%
addProviderTiles('OpenStreetMap.DE') %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude)) # fit boundary make it easy to see the data points
})
# adding another dynamic layer to leaflet
observe({
leafletProxy("map", data = filtered_data()) %>%
clearControls() %>% # Remove the previous legend feature
addCircles(radius = ~count*50, weight = 1, color = ~factpal(Genus), opacity = 100,
popup = ~paste('Genus:', Genus, '<br>', 'Location:',LGA_NAME22, '<br>', 'Number of observation:', count)) %>%
addLegend(position = 'bottomright', pal = factpal, values = ~Genus, title = "Genus")
})
}
#####################################################
shinyApp(ui = ui, server = server)
library(leaflet)
library(shiny)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(sp)
# Read csv
data = read_csv('PE2_frog_data.csv')
#Preparing data
#round down the longitude and latitude to 3decimal place
data$Longitude <- floor(data$Longitude * 1000) / 1000
data$Latitude <- floor(data$Latitude * 1000) / 1000
# Group data by Genus, LGA_NAME, lat and long and summarise the number of observation
group_data <- data %>%
group_by(Genus, LGA_NAME22, Latitude, Longitude) %>%
summarise(count = n())
# Prepare data for plot_1, group by Genus and, Habitat and summarise the number
data_plt1 <- data %>%
group_by(Genus, Habitat) %>%
summarise(observation_number = n())
# Prepare data for plot_2, select only top 4 genera
data_plt2 <- data %>%
filter(Genus != 'Pseudophryne')
data_plt2$Time_Start <- hour(data_plt2$Time_Start)
# Map colors to the genus
factpal <- colorFactor(palette = 'Dark2', group_data$Genus)
# Create ui in Shiny
ui <- fluidPage(theme = bslib::bs_theme(bootswatch = 'superhero'),    # use theme superhero
titlePanel("FROGS OBSERVED IN OUTER EASTERN MELBOURNE, 2000-2018"),
fluidRow(h4('The aims of this project is to display of the frogs behavior, including their habitat preferences and activity
patterns around the Monash, Knox, Whitehorse, and Maroondah areas. It may potentially help the researchers or people living in these areas to understand the nature of frogs.
')),
fluidRow(
column(width=5, offset=0.5,plotOutput('plot_1')),  # output plot_1
column(width=5, leafletOutput('map')),
column(width=2,
fluidRow(sliderInput("range", "Observation range", min(group_data$count), max(group_data$count),   # create slider, use range as output for server
value = range(group_data$count), step = 1),
checkboxGroupInput('genus', 'Genera', choiceNames = c("Crinia","Geocrinia","Limnodynastes","Litoria","Pseudophryne" ), # create checkbox, use genus as output for server
choiceValues = c("Crinia","Geocrinia","Limnodynastes","Litoria","Pseudophryne" ))
)
)),
fluidRow(h4('Frequency and location of frogs'), h5('From VIS1 and map, the most frequently observed frogs in the data set are Crinia,
Limnodynastes, Litoria, Geocrinia and Pseudophryne respectively. Majority of Crinia and Pesudophyryne
were found near to the water areas such as Dendenong creek, Corhanwarrabul wetlands etc... While over half of
Limnodynastes were seen on land similar to Litoria and Geocrinia. These observations may challenge the perception of
some people that frogs live close to water.')),
fluidRow(
column(width=5, h4('Observation time'), h5('According to the information shown on bar chart VIS2, the most active period of frogs is at approximately 8 PM at evening and 8AM in the morning and then gradually decrease to bottom at 1PM and during 1AM to 6PM.')),
column(width=6,plotOutput('plot_2'))  # ouput plot_2
)
)
# Shiny server
server <- function(input, output){
# create plot_1
plot_1 <- ggplot(data = data_plt1, aes(x = reorder(Genus, observation_number), y = observation_number, fill = Habitat)) +
geom_col(color = "black") +
labs(x = 'Genera', y = 'Number of observation', title = "VIS1 Frogs habitat") +
scale_fill_brewer(palette = "Dark2") + theme(plot.title = element_text(size = 20,face = 'bold')) + theme_light()
output$plot_1 <- renderPlot(plot_1)
# create plot_1
plot_2 <- ggplot(data_plt2, aes(x = Time_Start, fill = Genus)) +
geom_bar(color = 'black') + labs(x = 'Hour of day', y = "Number of observation", title = 'VIS2 Number of observation in hours') +
scale_fill_brewer(palette = "Dark2") + theme(plot.title = element_text(size = 20,face = 'bold'))  + theme_light()
output$plot_2 <- renderPlot(plot_2)
# Create interactive map
# receive input for filter data
filtered_data <- reactive({
group_data %>%
filter(count >= input$range[1] & count <= input$range[2]) %>%  # filter data by range
filter(Genus %in% input$genus)  # filter data by checkbox choices
})
# static map
output$map <- renderLeaflet({
leaflet(group_data) %>%
addProviderTiles('OpenStreetMap.DE') %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude)) # fit boundary make it easy to see the data points
})
# adding another dynamic layer to leaflet
observe({
leafletProxy("map", data = filtered_data()) %>%
clearControls() %>% # Remove the previous legend feature
clearShapes() %>%  # Clear the previous shapes
addCircles(radius = ~count*50, weight = 1, color = ~factpal(Genus), opacity = 100,
popup = ~paste('Genus:', Genus, '<br>', 'Location:',LGA_NAME22, '<br>', 'Number of observation:', count)) %>%
addLegend(position = 'bottomright', pal = factpal, values = ~Genus, title = "Genus")  # add legend
})
}
# call shinyApp
shinyApp(ui = ui, server = server)
library(leaflet)
library(shiny)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(sp)
# Read csv
data = read_csv('PE2_frog_data.csv')
#Preparing data
#round down the longitude and latitude to 3decimal place
data$Longitude <- floor(data$Longitude * 1000) / 1000
data$Latitude <- floor(data$Latitude * 1000) / 1000
# Group data by Genus, LGA_NAME, lat and long and summarise the number of observation
group_data <- data %>%
group_by(Genus, LGA_NAME22, Latitude, Longitude) %>%
summarise(count = n())
# Prepare data for plot_1, group by Genus and, Habitat and summarise the number
data_plt1 <- data %>%
group_by(Genus, Habitat) %>%
summarise(observation_number = n())
# Prepare data for plot_2, select only top 4 genera
data_plt2 <- data %>%
filter(Genus != 'Pseudophryne')
data_plt2$Time_Start <- hour(data_plt2$Time_Start)
# Map colors to the genus
factpal <- colorFactor(palette = 'Dark2', group_data$Genus)
# Create ui in Shiny
ui <- fluidPage(theme = bslib::bs_theme(bootswatch = 'superhero'),    # use theme superhero
titlePanel("FROGS OBSERVED IN OUTER EASTERN MELBOURNE, 2000-2018"),
fluidRow(h4('The aims of this project is to display of the frogs behavior, including their habitat preferences and activity
patterns around the Monash, Knox, Whitehorse, and Maroondah areas. It may potentially help the researchers or people living in these areas to understand the nature of frogs.
')),
fluidRow(
column(width=5, offset=0.5,plotOutput('plot_1')),  # output plot_1
column(width=5, leafletOutput('map')),
column(width=2,
fluidRow(sliderInput("range", "Observation range", min(group_data$count), max(group_data$count),   # create slider, use range as output for server
value = range(group_data$count), step = 1),
checkboxGroupInput('genus', 'Genera', choiceNames = unique(group_data$Genus), # create checkedbox, use genus as output for server
choiceValues = unique(group_data$Genus))
)
)),
fluidRow(h4('Frequency and location of frogs'), h5('From VIS1 and map, the most frequently observed frogs in the data set are Crinia,
Limnodynastes, Litoria, Geocrinia and Pseudophryne respectively. Majority of Crinia and Pesudophyryne
were found near to the water areas such as Dendenong creek, Corhanwarrabul wetlands etc... While over half of
Limnodynastes were seen on land similar to Litoria and Geocrinia. These observations may challenge the perception of
some people that frogs live close to water.')),
fluidRow(
column(width=5, h4('Observation time'), h5('According to the information shown on bar chart VIS2, the most active period of frogs is at approximately 8 PM at evening and 8AM in the morning and then gradually decrease to bottom at 1PM and during 1AM to 6PM.')),
column(width=6,plotOutput('plot_2'))  # output plot_2
)
)
# Shiny server
server <- function(input, output){
# create plot_1
plot_1 <- ggplot(data = data_plt1, aes(x = reorder(Genus, observation_number), y = observation_number, fill = Habitat)) +
geom_col(color = "black") +
labs(x = 'Genera', y = 'Number of observation', title = "VIS1 Frogs habitat") +
scale_fill_brewer(palette = "Dark2") + theme(plot.title = element_text(size = 20,face = 'bold')) + theme_light()
output$plot_1 <- renderPlot(plot_1)
# create plot_1
plot_2 <- ggplot(data_plt2, aes(x = Time_Start, fill = Genus)) +
geom_bar(color = 'black') + labs(x = 'Hour of day', y = "Number of observation", title = 'VIS2 Number of observation in hours') +
scale_fill_brewer(palette = "Dark2") + theme(plot.title = element_text(size = 20,face = 'bold'))  + theme_light()
output$plot_2 <- renderPlot(plot_2)
# Create interactive map
# receive input for filter data
filtered_data <- reactive({
group_data %>%
filter(count >= input$range[1] & count <= input$range[2]) %>%  # filter data by range
filter(Genus %in% input$genus)  # filter data by checkedbox choices
})
# static map
output$map <- renderLeaflet({
leaflet(group_data) %>%
addProviderTiles('OpenStreetMap.DE') %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude)) # fit boundary make it easy to see the data points
})
# adding another dynamic layer to leaflet
observe({
leafletProxy("map", data = filtered_data()) %>%
clearControls() %>% # Remove the previous legend feature
clearShapes() %>%  # Clear the previous shapes
addCircles(radius = ~count*50, weight = 1, color = ~factpal(Genus), opacity = 0.5, fillOpacity = 0.4,
popup = ~paste('Genus:', Genus, '<br>', 'Location:',LGA_NAME22, '<br>', 'Number of observation:', count)) %>%
addLegend(position = 'bottomright', pal = factpal, values = ~Genus, title = "Genus")  # add legend
})
}
# call shinyApp
shinyApp(ui = ui, server = server)
library(shiny); runApp('final.R')
library(leaflet)
library(shiny)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(sp)
# Read csv
data = read_csv('PE2_frog_data.csv')
#Preparing data
#round down the longitude and latitude to 3decimal place
data$Longitude <- floor(data$Longitude * 1000) / 1000
data$Latitude <- floor(data$Latitude * 1000) / 1000
# Group data by Genus, LGA_NAME, lat and long and summarise the number of observation
group_data <- data %>%
group_by(Genus, LGA_NAME22, Latitude, Longitude) %>%
summarise(count = n())
# Prepare data for plot_1, group by Genus and, Habitat and summarise the number
data_plt1 <- data %>%
group_by(Genus, Habitat) %>%
summarise(observation_number = n())
# Prepare data for plot_2, select only top 4 genera
data_plt2 <- data %>%
filter(Genus != 'Pseudophryne')
data_plt2$Time_Start <- hour(data_plt2$Time_Start)
# Map colors to the genus
factpal <- colorFactor(palette = 'Dark2', group_data$Genus)
# Create ui in Shiny
ui <- fluidPage(theme = bslib::bs_theme(bootswatch = 'superhero'),    # use theme superhero
titlePanel("FROGS OBSERVED IN OUTER EASTERN MELBOURNE, 2000-2018"),
fluidRow(h4('The aims of this project is to display of the frogs behavior, including their habitat preferences and activity
patterns around the Monash, Knox, Whitehorse, and Maroondah areas. It may potentially help the researchers or people living in these areas to understand the nature of frogs.
')),
fluidRow(
column(width=5, offset=0.5,plotOutput('plot_1')),  # output plot_1
column(width=5, leafletOutput('map')),
column(width=2,
fluidRow(sliderInput("range", "Observation range", min(group_data$count), max(group_data$count),   # create slider, use range as output for server
value = range(group_data$count), step = 1),
checkboxGroupInput('genus', 'Genera', choiceNames = unique(group_data$Genus), # create checkedbox, use genus as output for server
choiceValues = unique(group_data$Genus))
)
)),
fluidRow(h4('Frequency and location of frogs'), h5('From VIS1 and map, the most frequently observed frogs in the data set are Crinia,
Limnodynastes, Litoria, Geocrinia and Pseudophryne respectively. Majority of Crinia and Pesudophyryne
were found near to the water areas such as Dendenong creek, Corhanwarrabul wetlands etc... While over half of
Limnodynastes were seen on land similar to Litoria and Geocrinia. These observations may challenge the perception of
some people that frogs live close to water.')),
fluidRow(
column(width=5, h4('Observation time'), h5('According to the information shown on bar chart VIS2, the most active period of frogs is at approximately 8 PM at evening and 8AM in the morning and then gradually decrease to bottom at 1PM and during 1AM to 6PM.')),
column(width=6,plotOutput('plot_2'))  # output plot_2
)
)
# Shiny server
# reference https://rstudio.github.io/leaflet/shiny.html
server <- function(input, output){
# create plot_1
plot_1 <- ggplot(data = data_plt1, aes(x = reorder(Genus, observation_number), y = observation_number, fill = Habitat)) +
geom_col(color = "black") +
labs(x = 'Genera', y = 'Number of observation', title = "VIS1 Frogs habitat") +
scale_fill_brewer(palette = "Dark2") + theme(plot.title = element_text(size = 20,face = 'bold')) + theme_light()
output$plot_1 <- renderPlot(plot_1)
# create plot_1
plot_2 <- ggplot(data_plt2, aes(x = Time_Start, fill = Genus)) +
geom_bar(color = 'black') + labs(x = 'Hour of day', y = "Number of observation", title = 'VIS2 Number of observation in hours') +
scale_fill_brewer(palette = "Dark2") + theme(plot.title = element_text(size = 20,face = 'bold'))  + theme_light()
output$plot_2 <- renderPlot(plot_2)
# Create interactive map
# receive input for filter data
filtered_data <- reactive({
group_data %>%
filter(count >= input$range[1] & count <= input$range[2]) %>%  # filter data by range
filter(Genus %in% input$genus)  # filter data by checkedbox choices
})
# static map
output$map <- renderLeaflet({
leaflet(group_data) %>%
addProviderTiles('OpenStreetMap.DE') %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude)) # fit boundary make it easy to see the data points
})
# adding another dynamic layer to leaflet
observe({
leafletProxy("map", data = filtered_data()) %>%
clearControls() %>% # Remove the previous legend feature
clearShapes() %>%  # Clear the previous shapes
addCircles(radius = ~count*50, weight = 1, color = ~factpal(Genus), opacity = 0.5, fillOpacity = 0.4,
popup = ~paste('Genus:', Genus, '<br>', 'Location:',LGA_NAME22, '<br>', 'Number of observation:', count)) %>%
addLegend(position = 'bottomright', pal = factpal, values = ~Genus, title = "Genus")  # add legend
})
}
# call shinyApp
shinyApp(ui = ui, server = server)
# adding another dynamic layer to leaflet
observe({
leafletProxy("map", data = filtered_data()) %>%
clearControls() %>% # Remove the previous legend feature
clearShapes() %>%  # Clear the previous shapes
addCircles(radius = ~count*50, weight = 1, color = ~factpal(Genus), opacity = 0.5, fillOpacity = 0.4,
popup = ~paste('Genus:', Genus, '<br>', 'Location:',LGA_NAME22, '<br>', 'Number of observation:', count)) %>%
addLegend(position = 'bottomright', pal = factpal, values = ~Genus, title = "Genus")  # add legend
})
library(leaflet)
library(shiny)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(sp)
# Read csv
data = read_csv('PE2_frog_data.csv')
#Preparing data
#round down the longitude and latitude to 3decimal place
data$Longitude <- floor(data$Longitude * 1000) / 1000
data$Latitude <- floor(data$Latitude * 1000) / 1000
# Group data by Genus, LGA_NAME, lat and long and summarise the number of observation
group_data <- data %>%
group_by(Genus, LGA_NAME22, Latitude, Longitude) %>%
summarise(count = n())
# Prepare data for plot_1, group by Genus and, Habitat and summarise the number
data_plt1 <- data %>%
group_by(Genus, Habitat) %>%
summarise(observation_number = n())
# Prepare data for plot_2, select only top 4 genera
data_plt2 <- data %>%
filter(Genus != 'Pseudophryne')
data_plt2$Time_Start <- hour(data_plt2$Time_Start)
# Map colors to the genus
factpal <- colorFactor(palette = 'Dark2', group_data$Genus)
# Create ui in Shiny
ui <- fluidPage(theme = bslib::bs_theme(bootswatch = 'superhero'),    # use theme superhero
titlePanel("FROGS OBSERVED IN OUTER EASTERN MELBOURNE, 2000-2018"),
fluidRow(h4('The aims of this project is to display of the frogs behavior, including their habitat preferences and activity
patterns around the Monash, Knox, Whitehorse, and Maroondah areas. It may potentially help the researchers or people living in these areas to understand the nature of frogs.
')),
fluidRow(
column(width=5, offset=0.5,plotOutput('plot_1')),  # output plot_1
column(width=5, leafletOutput('map')),
column(width=2,
fluidRow(sliderInput("range", "Observation range", min(group_data$count), max(group_data$count),   # create slider, use range as output for server
value = range(group_data$count), step = 1),
checkboxGroupInput('genus', 'Genera', choiceNames = unique(group_data$Genus), # create checkedbox, use genus as output for server
choiceValues = unique(group_data$Genus))
)
)),
fluidRow(h4('Frequency and location of frogs'), h5('From VIS1 and map, the most frequently observed frogs in the data set are Crinia,
Limnodynastes, Litoria, Geocrinia and Pseudophryne respectively. Majority of Crinia and Pesudophyryne
were found near to the water areas such as Dendenong creek, Corhanwarrabul wetlands etc... While over half of
Limnodynastes were seen on land similar to Litoria and Geocrinia. These observations may challenge the perception of
some people that frogs live close to water.')),
fluidRow(
column(width=5, h4('Observation time'), h5('According to the information shown on bar chart VIS2, the most active period of frogs is at approximately 8 PM at evening and 8AM in the morning and then gradually decrease to bottom at 1PM and during 1AM to 6PM.')),
column(width=6,plotOutput('plot_2'))  # output plot_2
)
)
# Shiny server
# reference https://rstudio.github.io/leaflet/shiny.html
server <- function(input, output){
# create plot_1
plot_1 <- ggplot(data = data_plt1, aes(x = reorder(Genus, observation_number), y = observation_number, fill = Habitat)) +
geom_col(color = "black") +
labs(x = 'Genera', y = 'Number of observation', title = "VIS1 Frogs habitat") +
scale_fill_brewer(palette = "Dark2") + theme(plot.title = element_text(size = 20,face = 'bold')) + theme_light()
output$plot_1 <- renderPlot(plot_1)
# create plot_1
plot_2 <- ggplot(data_plt2, aes(x = Time_Start, fill = Genus)) +
geom_bar(color = 'black') + labs(x = 'Hour of day', y = "Number of observation", title = 'VIS2 Number of observation in hours') +
scale_fill_brewer(palette = "Dark2") + theme(plot.title = element_text(size = 20,face = 'bold'))  + theme_light()
output$plot_2 <- renderPlot(plot_2)
# Create interactive map
# receive input for filter data
filtered_data <- reactive({
group_data %>%
filter(count >= input$range[1] & count <= input$range[2]) %>%  # filter data by range
filter(Genus %in% input$genus)  # filter data by checkedbox choices
})
# static map
output$map <- renderLeaflet({
leaflet(group_data) %>%
addProviderTiles('OpenStreetMap.DE') %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude)) # fit boundary make it easy to see the data points
})
# adding another dynamic layer to leaflet
observe({
leafletProxy("map", data = filtered_data()) %>%
clearControls() %>% # Remove the previous legend feature
clearShapes() %>%  # Clear the previous shapes
addCircles(radius = ~count*50, weight = 1, color = ~factpal(Genus), opacity = 0.5, fillOpacity = 0.4,
popup = ~paste('Genus:', Genus, '<br>', 'Location:',LGA_NAME22, '<br>', 'Number of observation:', count)) %>%
addLegend(position = 'bottomright', pal = factpal, values = ~Genus, title = "Genus")  # add legend
})
}
# call shinyApp
shinyApp(ui = ui, server = server)
library(leaflet)
library(shiny)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(sp)
# Read csv
data = read_csv('PE2_frog_data.csv')
#Preparing data
#round down the longitude and latitude to 3decimal place
data$Longitude <- floor(data$Longitude * 1000) / 1000
data$Latitude <- floor(data$Latitude * 1000) / 1000
# Group data by Genus, LGA_NAME, lat and long and summarise the number of observation
group_data <- data %>%
group_by(Genus, LGA_NAME22, Latitude, Longitude) %>%
summarise(count = n())
# Prepare data for plot_1, group by Genus and, Habitat and summarise the number
data_plt1 <- data %>%
group_by(Genus, Habitat) %>%
summarise(observation_number = n())
# Prepare data for plot_2, select only top 4 genera
data_plt2 <- data %>%
filter(Genus != 'Pseudophryne')
data_plt2$Time_Start <- hour(data_plt2$Time_Start)
# Map colors to the genus
factpal <- colorFactor(palette = 'Dark2', group_data$Genus)
# Create ui in Shiny
ui <- fluidPage(theme = bslib::bs_theme(bootswatch = 'superhero'),    # use theme superhero
titlePanel("FROGS OBSERVED IN OUTER EASTERN MELBOURNE, 2000-2018"),
fluidRow(h4('The aims of this project is to display of the frogs behavior, including their habitat preferences and activity
patterns around the Monash, Knox, Whitehorse, and Maroondah areas. It may potentially help the researchers or people living in these areas to understand the nature of frogs.
')),
fluidRow(
column(width=5, offset=0.5,plotOutput('plot_1')),  # output plot_1
column(width=5, leafletOutput('map')),
column(width=2,
fluidRow(sliderInput("range", "Observation range", min(group_data$count), max(group_data$count),   # create slider, use range as output for server
value = range(group_data$count), step = 1),
checkboxGroupInput('genus', 'Genera', choiceNames = unique(group_data$Genus), # create checkedbox, use genus as output for server
choiceValues = unique(group_data$Genus))
)
)),
fluidRow(h4('Frequency and location of frogs'), h5('From VIS1 and map, the most frequently observed frogs in the data set are Crinia,
Limnodynastes, Litoria, Geocrinia and Pseudophryne respectively. Majority of Crinia and Pesudophyryne
were found near to the water areas such as Dendenong creek, Corhanwarrabul wetlands etc... While over half of
Limnodynastes were seen on land similar to Litoria and Geocrinia. These observations may challenge the perception of
some people that frogs live close to water.')),
fluidRow(
column(width=5, h4('Observation time'), h5('According to the information shown on bar chart VIS2, the most active period of frogs is at approximately 8 PM at evening and 8AM in the morning and then gradually decrease to bottom at 1PM and during 1AM to 6PM.')),
column(width=6,plotOutput('plot_2'))  # output plot_2
)
)
# Shiny server
# reference https://rstudio.github.io/leaflet/shiny.html
server <- function(input, output){
# create plot_1
plot_1 <- ggplot(data = data_plt1, aes(x = reorder(Genus, observation_number), y = observation_number, fill = Habitat)) +
geom_col(color = "black") +
labs(x = 'Genera', y = 'Number of observation', title = "VIS1 Frogs habitat") +
scale_fill_brewer(palette = "Dark2") + theme(plot.title = element_text(size = 20,face = 'bold')) + theme_light()
output$plot_1 <- renderPlot(plot_1)
# create plot_1
plot_2 <- ggplot(data_plt2, aes(x = Time_Start, fill = Genus)) +
geom_bar(color = 'black') + labs(x = 'Hour of day', y = "Number of observation", title = 'VIS2 Number of observation in hours') +
scale_fill_brewer(palette = "Dark2") + theme(plot.title = element_text(size = 20,face = 'bold'))  + theme_light()
output$plot_2 <- renderPlot(plot_2)
# Create interactive map
# receive input for filter data
filtered_data <- reactive({
group_data %>%
filter(count >= input$range[1] & count <= input$range[2]) %>%  # filter data by range
filter(Genus %in% input$genus)  # filter data by checkedbox choices
})
# static map
output$map <- renderLeaflet({
leaflet(group_data) %>%
addProviderTiles('OpenStreetMap.DE') %>%
fitBounds(~min(Longitude), ~min(Latitude), ~max(Longitude), ~max(Latitude)) # fit boundary make it easy to see the data points
})
# adding another dynamic layer to leaflet
observe({
leafletProxy("map", data = filtered_data()) %>%
clearControls() %>% # Remove the previous legend feature
clearShapes() %>%  # Clear the previous shapes
addCircles(radius = ~count*50, weight = 1, color = ~factpal(Genus), opacity = 0.5, fillOpacity = 0.4,
popup = ~paste('Genus:', Genus, '<br>', 'Location:',LGA_NAME22, '<br>', 'Number of observation:', count)) %>%
addLegend(position = 'bottomright', pal = factpal, values = ~Genus, title = "Genus")  # add legend
})
}
# call shinyApp
shinyApp(ui = ui, server = server)
